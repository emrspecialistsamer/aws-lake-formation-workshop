Description: CloudFormation template to create AWS Lake Formation workshop resources
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Database Configuration"
        Parameters:
          - TPCDBName
          - DBMasterUser
          - DBMasterPassword
      -
        Label:
          default: "User Configuration"
        Parameters:
          - TestUserPassword
    ParameterLabels:
      TPCDBName:
        default: "Database Name"
      DBMasterUser:
        default: "Master Username"
      DBMasterPassword:
        default: "Master User Password"
      TestUserPassword:
        default: "Test User Password"
      EC2KeyPair:
        default: "EC2 Key Pair"
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
    PublicTwo:
      CIDR: 10.0.1.0/24
    Private:
      CIDR: 10.0.2.0/24
  AWSRegionAMI:
    us-east-1:
      HVM64: ami-0c6b1d09930fac512
    us-east-2:
      HVM64: ami-00ceeb607e7372455
    us-west-2:
      HVM64: ami-03d1cd80b265afe51
    eu-west-1:
      HVM64: ami-007fb32dc0831ae00
    ap-northeast-1:
      HVM64: ami-029976583a7442c30
Parameters:
  TPCDBName:
    Type: String
    Default: tpc
    AllowedValues:
      - tpc
    Description: Name of the database that will be created.
  DBMasterUser:
    Type: String
    Default: tpcadmin
    Description: Master username for TPC database.
  DBMasterPassword:
    Type: String
    Default: BigData26!
    Description: Master password for TPC database.
  TestUserPassword:
    Type: String
    Default: Password1!
    Description: Password for all test users.
  EC2KeyPair:
    Description: Amazon EC2 Key Pair
    Type: 'AWS::EC2::KeyPair::KeyName'
    MinLength: 1
Resources:
  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for RDS
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-Workshop-RDS-SecGroup
  SelfIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn: RDSSecurityGroup
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref RDSSecurityGroup
  RDSSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: RDS Subnet Group using subnets from 2 AZs
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      Tags:
        - Key: Name
          Value: LF-Workshop-RDS-SubnetGroup
  TPCDatabase:
    Type: 'AWS::RDS::DBInstance'
    DependsOn:
      - RDSSubnetGroup
      - RDSSecurityGroup
    DeletionPolicy: Delete
    Properties:
      DBInstanceClass: db.r5.large
      DBInstanceIdentifier: tpc-database
      DBName: !Ref TPCDBName
      AllocatedStorage: '100'
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: MySQL
      EngineVersion: 5.7.22
      MasterUsername: !Ref DBMasterUser
      MasterUserPassword: !Ref DBMasterPassword
      BackupRetentionPeriod: '0'
      StorageType: gp2
      AllowMajorVersionUpgrade: false
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: true
  LakeFormationVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: LF-Workshop-VPC
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - Private
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-Workshop-PrivateSubnet
  PublicSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - PublicOne
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-Workshop-PublicSubneOne
  PublicSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - PublicTwo
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-Workshop-PublicSubnetTwo
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: LF-Workshop-IG
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref LakeFormationVPC
      InternetGatewayId: !Ref InternetGateway
  InternetGatewayRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref LakeFormationVPC
  InternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref InternetGatewayRouteTable
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref PublicSubnetOne
  PublicSubnetTwoRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref PublicSubnetTwo
  NATGatewayAttachment:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref PublicSubnetOne
      AllocationId: !GetAtt
        - NATGatewayAttachment
        - AllocationId
      Tags:
        - Key: Name
          Value: LF-NAT-Gateway
  NATGatewayRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-NAT-RouteTable
  NATGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref NATGatewayRouteTable
      NatGatewayId: !Ref NATGateway
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref NATGatewayRouteTable
      SubnetId: !Ref PrivateSubnet
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: '*'
            Principal: '*'
            Resource: '*'
      RouteTableIds:
        - !Ref NATGatewayRouteTable
        - !Ref InternetGatewayRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref LakeFormationVPC
  TPCGlueConnector:
    Type: 'AWS::Glue::Connection'
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      ConnectionInput:
        Name: TPCGlueConnector
        ConnectionType: JDBC
        PhysicalConnectionRequirements:
          AvailabilityZone: !Select
            - 0
            - !GetAZs
              Ref: 'AWS::Region'
          SecurityGroupIdList:
            - !Ref RDSSecurityGroup
          SubnetId: !Ref PublicSubnetOne
        ConnectionProperties:
          JDBC_CONNECTION_URL: !Join
            - ''
            - - 'jdbc:mysql://'
              - !GetAtt
                - TPCDatabase
                - Endpoint.Address
              - ':3306/tpc'
          USERNAME: !Ref DBMasterUser
          PASSWORD: !Ref DBMasterPassword
          JDBC_ENFORCE_SSL: 'false'
  GlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyName: LF-Data-Lake-Storage-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
        - PolicyName: Glue-Demo-Access-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref GlueBucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref GlueBucket
        - PolicyName: LF-DataAccess-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                - lakeformation:GetDataAccess
                - lakeformation:GrantPermissions
                Resource: "*"
        - PolicyName: LF-Workflow-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                   - !Join
                     - ''
                     - - 'arn:aws:iam::'
                       - !Ref 'AWS::AccountId'
                       - ':role/LF-GlueServiceRole'
      RoleName: LF-GlueServiceRole
  DataLakeBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - '-'
        - - lf-data-lake-bucket
          - !Ref 'AWS::AccountId'
  AthenaQueryResultBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - '-'
        - - lf-athena-query-results
          - !Ref 'AWS::AccountId'
  GlueBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: !Join
          - '-'
          - - lf-glue-bucket
            - !Ref 'AWS::AccountId'
  AdminUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Ref TestUserPassword
        PasswordResetRequired: false
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      UserName: lf-admin
  DeveloperUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Ref TestUserPassword
        PasswordResetRequired: false
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref AthenaQueryResultBucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref AthenaQueryResultBucket
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
      UserName: lf-developer
  CampaignManagerUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Ref TestUserPassword
        PasswordResetRequired: false
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref AthenaQueryResultBucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref AthenaQueryResultBucket
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
      UserName: lf-campaign-manager
  BusinessAnalystUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Ref TestUserPassword
        PasswordResetRequired: false
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref AthenaQueryResultBucket
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref AthenaQueryResultBucket
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
      UserName: lf-business-analyst
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      RoleName: EC2Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  BackUpRestoreInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.small
      ImageId: !FindInMap [AWSRegionAMI, !Ref 'AWS::Region', HVM64]
      KeyName: !Ref EC2KeyPair
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref RDSSecurityGroup
          SubnetId: !Ref PublicSubnetOne
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -ex
            - |
              sudo yum -y install mysql
            - 'aws s3 cp s3://aws-data-analytics-blog/lake-formation-workshop/sampledata/tripdata.csv '
            - 's3://'
            - !Ref GlueBucket
            - '/nyctaxi/'
            - |+

            - 'aws s3 cp s3://aws-data-analytics-blog/lake-formation-workshop/scripts/nyctaxi-csv-to-json.py '
            - 's3://'
            - !Ref GlueBucket
            - '/scripts/'
            - |+

            - >
              aws s3 cp
              s3://aws-data-analytics-blog/lake-formation-workshop/sampledata/tpc.backup
              /tmp/
            - 'gunzip < /tmp/tpc.backup | mysql -h '
            - !GetAtt
              - TPCDatabase
              - Endpoint.Address
            - ' -u '
            - !Ref DBMasterUser
            - ' -p'''
            - !Ref DBMasterPassword
            - ''' '
            - !Ref TPCDBName
            - |+

      Tags:
        - Key: Name
          Value: EC2-DB-Loader
    DependsOn:
      - TPCDatabase

  AthenaDeveloperNamedQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref TPCDBName
      Description: "A developer query on web page and web sales data."
      Name: "LF-Developer-Query"
      QueryString: >
                   /*
                    * Developer can only see web_page & web_sales tables
                    */
                   SELECT sum(ws_net_paid_inc_tax) NetPaid,
                           ws_web_site_sk WebSiteID
                   FROM dl_tpc_web_sales ws, dl_tpc_web_page wp
                   WHERE ws.ws_web_site_sk = wp.wp_web_page_sk
                   GROUP BY  ws_web_site_sk;


                   /*
                    Check out the web_sales table
                   */
                   SELECT COUNT(*) FROM dl_tpc_web_sales;


                   /*
                   Verify that a developer cannot access any other table. This should give a Insufficient Privileges message
                   */
                   SELECT * FROM dl_tpc_item limit 10;

  AthenaBusinessAnalystNamedQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref TPCDBName
      Description: "Sample query issued by Campaign Manager on web page data."
      Name: "LF-BusinessAnalyst-Query"
      QueryString: >
                  /*
                    Run a sample query as a business analyst
                    */
                    SELECT sum(ws.ws_net_paid_inc_tax) NetPaid, count(distinct i.i_item_sk) NumItems, ca.ca_zip ZipCode FROM dl_tpc_item i, dl_tpc_web_sales ws, dl_tpc_customer_address ca
                    WHERE i.i_item_sk = ws.ws_item_sk
                    AND ws.ws_ship_addr_sk = ca.ca_address_sk
                    GROUP BY ca.ca_zip;

                    /*
                     Verify that business-analyst can access the all the non-PII columns in customer table
                     */
                    SELECT *
                    FROM dl_tpc_customer limit 10;

                    /*
                     Verify that a business-analyst cannot access PII data
                    */
                    SELECT c_first_name, c_last_name, c_customer_sk, c_current_addr_sk
                    FROM dl_tpc_customer;
  AthenaCampaignManagerNamedQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: !Ref TPCDBName
      Description: "Sample query issued by Campaign Manager."
      Name: "LF-CampaignManager-Query"
      QueryString: >
                   /*
                    * Sample Query from a Campaign Manager who is interested in marketing analytics
                    */

                   SELECT count(distinct i.i_item_sk) NumItems, p.p_promo_id PromotionId
                   FROM dl_tpc_item i, dl_tpc_promotion p, dl_tpc_web_sales ws
                   WHERE i.i_item_sk = ws_item_sk
                   AND ws.ws_promo_sk = p.p_promo_sk
                   GROUP BY p.p_promo_id;

                   /*
                    * Make sure Campaign manager cannot access web_page table
                    */
                   SELECT count(*) FROM dl_tpc_web_page;
Outputs:
  LFBucketName:
    Description: Lake Formation Data Lake Bucket Name
    Value: !Ref DataLakeBucket
  GlueDemoBucketName:
      Description: S3 bucket for Glue Demos
      Value: !Ref GlueBucket
  AthenaQueryResultBucketName:
    Description: Bucket to store Athena query results
    Value: !Ref AthenaQueryResultBucket
  LFUsersPassword:
    Description: Password for Data Lake Users
    Value: !Ref TestUserPassword
  ConsoleIAMLoginUrl:
    Description: Console IAM Login URL to try out different users
    Value: !Join
              - ''
              - - 'https://'
                - !Ref 'AWS::AccountId'
                - '.signin.aws.amazon.com/console'