{
  "Description": "CloudFormation template to create Amazon EMR cluster with AWS Lake Formation integration with IdP Federation workshop resources",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "EMR Cluster Configuration"
          },
          "Parameters": [
            "SAMLProviderName",
            "IdentityProviderMetaDataInS3",
            "Realm",
            "KdcAdminPassword",
            "ReleaseLabel",
            "InstanceType",
            "EC2KeyPair",
            "VPCPublicSubnet"


          ]
        }
      ],
      "ParameterLabels": {

        "EC2KeyPair": {
          "default": "EC2 Key Pair"
        },
        "SAMLProviderName": {
          "default": "SAML Identity Provider Name In AWS"
        },
        "IdentityProviderMetaDataInS3": {
          "default": "SAML Identity Provider MetaData "
        }

      }
    }
  },
  "Mappings": {
    "AWSRegionAMI": {
      "us-east-1": {
        "HVM64": "ami-0c6b1d09930fac512"
      },
      "us-east-2": {
        "HVM64": "ami-02ccb28830b645a41"
      },
      "us-west-2": {
        "HVM64": "ami-04590e7389a6e577c"
      },
      "us-west-1": {
        "HVM64": "ami-03caa3f860895f82e"
      },
      "ap-northeast-1": {
        "HVM64": "ami-011facbea5ec0363b"
      }
    }
  },
  "Parameters": {

    "EC2KeyPair": {
      "Description": "Amazon EC2 Key Pair",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": 1
    },
    "SAMLProviderName": {
      "Type": "String",
      "Default": "auth0SAMLProvider",
      "Description": "SAML Provider Name Created in AWS"
    },
    "IdentityProviderMetaDataInS3": {
      "Type": "String",
      "Description": "Identity Provider Metadata xml file in S3 (e.g s3://bucket/myfolder/metadata.xml ),if you are planning on integrating LakeFormation with EMR and  SAML authentication then you need provide proper S3 file path, default value is just a dummy file",
      "Default": "s3://emr-workshops-us-west-2/lakeformation-emr-workshop/auth0-metadata/Auth0metadata.xml"

    },
    "KdcAdminPassword": {
      "Type": "String",
      "Default": "Password1!"
    },
    "Realm": {
      "Type": "String",
      "Default": "EC2.INTERNAL",
      "Description": "Kerberos Realm for Internal KDC"
    },
    "ReleaseLabel": {
      "Type": "String",
      "Default": "emr-5.29.0",
      "AllowedValues": [
        "emr-5.26.0",
        "emr-5.27.0",
        "emr-5.28.0",
        "emr-5.29.0"
      ],
      "Description": "EMR Version"
    },
    "VPCPublicSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Public Subnet to be used for Amazon EMR cluster, please choose LF-Workshop-PublicSubnetTwo"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "m4.xlarge",
      "Description": "EMR Cluster Instance Types for both Master & Core"
    }
  },
  "Resources": {

    "LakeFormationSAMLRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":saml-provider/",
                      {
                        "Ref": "SAMLProviderName"
                      }
                    ]
                  ]
                }
              },
              "Action": "sts:AssumeRoleWithSAML"
            },
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "glue.amazonaws.com",
                  "lakeformation.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LF-SAML-Policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": {
                "Effect": "Allow",
                "Action": [
                  "lakeformation:GetDataAccess",
                  "lakeformation:GetMetadataAccess",
                  "glue:CreateDatabase",
                  "glue:GetUnfiltered*",
                  "glue:GetTable",
                  "glue:GetTables",
                  "glue:GetDatabase",
                  "glue:GetDatabases",
                  "glue:GetUserDefinedFunction",
                  "glue:GetUserDefinedFunctions"
                ],
                "Resource": "*"
              }
            }
          }
        ],
        "RoleName": "LF-SAML-Role"
      }
    },
    "LakeFormationEMRRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "elasticmapreduce.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LF-EMR-Policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "ec2:AuthorizeSecurityGroupEgress",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:CancelSpotInstanceRequests",
                    "ec2:CreateNetworkInterface",
                    "ec2:CreateSecurityGroup",
                    "ec2:CreateTags",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DeleteSecurityGroup",
                    "ec2:DeleteTags",
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeAccountAttributes",
                    "ec2:DescribeDhcpOptions",
                    "ec2:DescribeImages",
                    "ec2:DescribeInstanceStatus",
                    "ec2:DescribeInstances",
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeNetworkAcls",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribePrefixLists",
                    "ec2:DescribeRouteTables",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeSpotInstanceRequests",
                    "ec2:DescribeSpotPriceHistory",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeTags",
                    "ec2:DescribeVpcAttribute",
                    "ec2:DescribeVpcEndpoints",
                    "ec2:DescribeVpcEndpointServices",
                    "ec2:DescribeVpcs",
                    "ec2:DetachNetworkInterface",
                    "ec2:ModifyImageAttribute",
                    "ec2:ModifyInstanceAttribute",
                    "ec2:RequestSpotInstances",
                    "ec2:RevokeSecurityGroupEgress",
                    "ec2:RunInstances",
                    "ec2:TerminateInstances",
                    "ec2:DeleteVolume",
                    "ec2:DescribeVolumeStatus",
                    "ec2:DescribeVolumes",
                    "ec2:DetachVolume",
                    "iam:GetRole",
                    "iam:GetRolePolicy",
                    "iam:ListInstanceProfiles",
                    "iam:ListRolePolicies",
                    "iam:PassRole",
                    "sdb:BatchPutAttributes",
                    "sdb:Select",
                    "sqs:CreateQueue",
                    "sqs:Delete*",
                    "sqs:GetQueue*",
                    "sqs:PurgeQueue",
                    "sqs:ReceiveMessage",
                    "cloudwatch:PutMetricAlarm",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:DeleteAlarms",
                    "application-autoscaling:RegisterScalableTarget",
                    "application-autoscaling:DeregisterScalableTarget",
                    "application-autoscaling:PutScalingPolicy",
                    "application-autoscaling:DeleteScalingPolicy",
                    "application-autoscaling:Describe*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "iam:CreateServiceLinkedRole",
                  "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*",
                  "Condition": {
                    "StringLike": {
                      "iam:AWSServiceName": "spot.amazonaws.com"
                    }
                  }
                }
              ]
            }
          }
        ],
        "RoleName": "LF-EMR-Role"
      }
    },
    "LakeFormationEMRInstanceProfileRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LF-EMR-InstanceProfile-Policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "cloudwatch:*",
                    "dynamodb:*",
                    "ec2:Describe*",
                    "elasticmapreduce:Describe*",
                    "elasticmapreduce:ListBootstrapActions",
                    "elasticmapreduce:ListClusters",
                    "elasticmapreduce:ListInstanceGroups",
                    "elasticmapreduce:ListInstances",
                    "elasticmapreduce:ListSteps",
                    "kinesis:CreateStream",
                    "kinesis:DeleteStream",
                    "kinesis:DescribeStream",
                    "kinesis:GetRecords",
                    "kinesis:GetShardIterator",
                    "kinesis:MergeShards",
                    "kinesis:PutRecord",
                    "kinesis:SplitShard",
                    "rds:Describe*",
                    "s3:*",
                    "sdb:*",
                    "sns:*",
                    "sqs:*",
                    "glue:CreateDatabase",
                    "glue:UpdateDatabase",
                    "glue:DeleteDatabase",
                    "glue:GetDatabase",
                    "glue:GetDatabases",
                    "glue:CreateTable",
                    "glue:UpdateTable",
                    "glue:DeleteTable",
                    "glue:GetTable",
                    "glue:GetTables",
                    "glue:GetTableVersions",
                    "glue:CreatePartition",
                    "glue:BatchCreatePartition",
                    "glue:UpdatePartition",
                    "glue:DeletePartition",
                    "glue:BatchDeletePartition",
                    "glue:GetPartition",
                    "glue:GetPartitions",
                    "glue:BatchGetPartition",
                    "glue:CreateUserDefinedFunction",
                    "glue:UpdateUserDefinedFunction",
                    "glue:DeleteUserDefinedFunction",
                    "glue:GetUserDefinedFunction",
                    "glue:GetUserDefinedFunctions"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:DescribeAssociation",
                    "ssm:GetDeployablePatchSnapshotForInstance",
                    "ssm:GetDocument",
                    "ssm:DescribeDocument",
                    "ssm:GetManifest",
                    "ssm:GetParameters",
                    "ssm:ListAssociations",
                    "ssm:ListInstanceAssociations",
                    "ssm:PutInventory",
                    "ssm:PutComplianceItems",
                    "ssm:PutConfigurePackageResult",
                    "ssm:UpdateAssociationStatus",
                    "ssm:UpdateInstanceAssociationStatus",
                    "ssm:UpdateInstanceInformation"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssmmessages:CreateControlChannel",
                    "ssmmessages:CreateDataChannel",
                    "ssmmessages:OpenControlChannel",
                    "ssmmessages:OpenDataChannel"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2messages:AcknowledgeMessage",
                    "ec2messages:DeleteMessage",
                    "ec2messages:FailMessage",
                    "ec2messages:GetEndpoint",
                    "ec2messages:GetMessages",
                    "ec2messages:SendReply"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstanceStatus"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ds:CreateComputer",
                    "ds:DescribeDirectories"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "iam:PassRole",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":role/LF-SAML-Role"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "sts:AssumeRole",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":role/LF-EMR-Role"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": "lakeformation:GetTemporaryUserCredentialsWithSAML",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "iam:GetRole",
                  "Resource": "arn:aws:iam::*:role/*"
                }
              ]
            }
          }
        ],
        "RoleName": "LF-EMR-InstanceProfile-Role"
      }
    },
    "LFEMRInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": "LakeFormationEMRInstanceProfileRole",
        "Path": "/",
        "Roles": [
          {
            "Ref": "LakeFormationEMRInstanceProfileRole"
          }
        ]
      }
    },
    "LFEMRSecurityConfiguration": {
      "Type": "AWS::EMR::SecurityConfiguration",
      "DependsOn": [
        "LakeFormationSAMLRole"
      ],
      "Properties": {
        "Name": "LF-EMR-SecurityConfiguration",
        "SecurityConfiguration": {
          "LakeFormationConfiguration": {
            "IdpMetadataS3Path": {
              "Ref": "IdentityProviderMetaDataInS3"
            },
            "EmrRoleForUsersARN": {
              "Fn::GetAtt": [
                "LakeFormationEMRRole",
                "Arn"
              ]
            },
            "LakeFormationRoleForSAMLPrincipalARN": {
              "Fn::GetAtt": [
                "LakeFormationSAMLRole",
                "Arn"
              ]
            }
          },
          "AuthenticationConfiguration": {
            "KerberosConfiguration": {
              "Provider": "ClusterDedicatedKdc",
              "ClusterDedicatedKdcConfiguration": {
                "TicketLifetimeInHours": 24
              }
            }
          }
        }
      }
    },
    "S3EMRLogsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              "emr-logs",
              {
                "Ref": "AWS::AccountId"
              }
            ]
          ]
        }
      }
    },"S3NotebooksBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              "notebooks",
              {
                "Ref": "AWS::AccountId"
              }
            ]
          ]
        }
      }
    },
    "EMRCluster": {
      "Type": "AWS::EMR::Cluster",
      "DependsOn": [
        "LFEMRSecurityConfiguration",
        "LakeFormationEMRInstanceProfileRole",
        "LFEMRInstanceProfile",
        "S3NotebooksBucket"
      ],
      "Properties": {
        "Instances": {
          "MasterInstanceGroup": {
            "InstanceCount": 1,
            "InstanceType": {
              "Ref": "InstanceType"
            },
            "Market": "ON_DEMAND",
            "Name": "cfnMaster"
          },
          "CoreInstanceGroup": {
            "InstanceCount": 1,
            "InstanceType": {
              "Ref": "InstanceType"
            },
            "Market": "ON_DEMAND",
            "Name": "cfnCore"
          },
          "Ec2SubnetId": {
            "Ref": "VPCPublicSubnet"
          },
          "Ec2KeyName": {
            "Ref": "EC2KeyPair"
          }
        },
        "Name": "LF-EMRCluster",
        "Applications": [
          {
            "Name": "Hadoop"
          },
          {
            "Name": "Spark"
          },
          {
            "Name": "Livy"
          },
          {
            "Name": "Zeppelin"
          }
        ],
        "Configurations": [
          {
            "Classification": "spark-hive-site",
            "ConfigurationProperties": {
              "hive.metastore.glue.catalogid": {
                "Ref": "AWS::AccountId"
              }
            }
          }
        ],
        "JobFlowRole": {
          "Ref": "LFEMRInstanceProfile"
        },
        "KerberosAttributes": {
          "KdcAdminPassword": {
            "Ref": "KdcAdminPassword"
          },
          "Realm": {
            "Ref": "Realm"
          }
        },
        "ServiceRole": {
          "Ref": "LakeFormationEMRRole"
        },
        "BootstrapActions": [
          {
            "Name": "Download the scripts",
            "ScriptBootstrapAction": {
              "Path": "s3://emr-workshops-us-west-2/lakeformation-emr-workshop/scripts/download-scripts.sh",
              "Args": ["emr-workshops-us-west-2/lakeformation-emr-workshop"]
            }
          }
        ],
        "ReleaseLabel": {
          "Ref": "ReleaseLabel"
        },
        "SecurityConfiguration": {
          "Ref": "LFEMRSecurityConfiguration"
        },
        "VisibleToAllUsers": true,
        "LogUri": {
          "Fn::Join": [
            "",
            [
              "s3://",
              {
                "Ref": "S3EMRLogsBucket"
              },
              "/"
            ]
          ]
        }
      }
    },"EMRCopyNotebooksStep": {
      "Type": "AWS::EMR::Step",
      "Properties": {
        "ActionOnFailure": "CONTINUE",
        "HadoopJarStep": {
          "Args": [
            "/tmp/scripts/copynotebooks.sh",
            "emr-workshops-us-west-2/lakeformation-emr-workshop",
            {
              "Fn::Join": [
                "",
                [
                  "s3://",
                  {
                    "Ref": "S3NotebooksBucket"
                  }
                ]
              ]
            }
          ],
          "Jar": "s3://elasticmapreduce/libs/script-runner/script-runner.jar",
          "MainClass": ""
        },
        "Name": "CopyNoteBooks",
        "JobFlowId": {
          "Ref": "EMRCluster"
        }
      }

    }

  },
  "Outputs": {
    "ConsoleIAMLoginUrl": {
      "Description": "Console IAM Login URL to try out different users",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "AWS::AccountId"
            },
            ".signin.aws.amazon.com/console"
          ]
        ]
      }
    },
    "EMRMasterNodeDNS": {
      "Description": "EMR Cluster Master Node DNS",
      "Value":
      { "Fn::GetAtt" : [ "EMRCluster", "MasterPublicDNS" ] }

    },
    "NoteBooksBucketName": {
      "Description": "Bucket which contains Zeppelin & EMR Notebooks",
      "Value": {
        "Ref": "S3NotebooksBucket"
      }
    }
  }
}