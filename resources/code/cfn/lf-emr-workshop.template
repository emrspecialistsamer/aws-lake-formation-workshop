{
  "Description":"CloudFormation template to create Amazon EMR cluster with AWS Lake Formation integration with IdP Federation workshop resources",
  "Metadata":{
    "AWS::CloudFormation::Interface":{
      "ParameterGroups":[
        {
          "Label":{
            "default":"Amazon EMR Cluster Configuration"
          },
          "Parameters":[
            "ReleaseLabel",
            "InstanceType",
            "VPCPublicSubnet",
            "EC2KeyPair"
          ]
        },
        {
          "Label":{
            "default":"SAML Configuration"
          },
          "Parameters":[
            "SAMLProviderName",
            "IdentityProviderMetadataPath"
          ]
        }
      ],
      "ParameterLabels":{
        "ReleaseLabel":{
          "default":"EMR Release Label"
        },
        "VPCPublicSubnet":{
          "default":"VPC Public Subnet"
        },
        "EC2KeyPair":{
          "default":"EC2 Key Pair"
        },
        "SAMLProviderName":{
          "default":"SAML Identity Provider Name"
        },
        "IdentityProviderMetadataPath":{
          "default":"SAML Identity Provider Metadata Path"
        }
      }
    }
  },
  "Mappings":{
    "AWSRegionAMI":{
      "us-east-1":{
        "HVM64":"ami-0c6b1d09930fac512"
      },
      "us-east-2":{
        "HVM64":"ami-02ccb28830b645a41"
      },
      "us-west-2":{
        "HVM64":"ami-04590e7389a6e577c"
      },
      "us-west-1":{
        "HVM64":"ami-03caa3f860895f82e"
      },
      "ap-northeast-1":{
        "HVM64":"ami-011facbea5ec0363b"
      }
    },
    "Suffix":{
      "auth0SAMLProvider":{
        "Value":"Auth0"
      },
      "oktaSAMLProvider":{
        "Value":"Okta"
      },
      "ADFSSAMLProvider":{
        "Value":"ADFS"
      }
    }
  },
  "Parameters":{
    "EC2KeyPair":{
      "Description":"Amazon EC2 Key Pair",
      "Type":"AWS::EC2::KeyPair::KeyName",
      "MinLength":1,
      "AllowedPattern":".+"
    },
    "SAMLProviderName":{
      "Type":"String",
      "Default":"auth0SAMLProvider",
      "AllowedValues":[
        "auth0SAMLProvider",
        "oktaSAMLProvider",
        "ADFSSAMLProvider"
      ],
      "Description":"SAML Provider Name"
    },
    "IdentityProviderMetadataPath":{
      "Type":"String",
      "Description":"Identity Provider Metadata file in S3 (e.g s3://lf-workshop-<account-id>/metadata/metadata.xml )",
      "AllowedPattern":"s3:\/\/.*"
    },
    "ReleaseLabel":{
      "Type":"String",
      "Default":"emr-5.31.0",
      "AllowedValues":[
        "emr-5.31.0"
      ],
      "Description":"Amazon EMR Version"
    },
    "VPCPublicSubnet":{
      "Type":"AWS::EC2::Subnet::Id",
      "Description":"Public Subnet to be used for Amazon EMR cluster, please choose either LF-Workshop-PublicSubnetOne or LF-Workshop-PublicSubnetTwo",
      "AllowedPattern":".+"
    },
    "InstanceType":{
      "Type":"String",
      "Default":"m4.xlarge",
      "Description":"Amazon EMR Cluster Instance Type"
    }
  },
  "Resources":{
    "LakeFormationSAMLRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Federated":{
                  "Fn::Join":[
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref":"AWS::AccountId"
                      },
                      ":saml-provider/",
                      {
                        "Ref":"SAMLProviderName"
                      }
                    ]
                  ]
                }
              },
              "Action":"sts:AssumeRoleWithSAML"
            },
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "glue.amazonaws.com",
                  "lakeformation.amazonaws.com"
                ]
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "Policies":[
          {
            "PolicyName":"LF-SAML-Policy",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":{
                "Effect":"Allow",
                "Action":[
                  "lakeformation:GetDataAccess",
                  "lakeformation:GetMetadataAccess",
                  "glue:CreateDatabase",
                  "glue:GetUnfiltered*",
                  "glue:GetTable",
                  "glue:GetTables",
                  "glue:GetDatabase",
                  "glue:GetDatabases",
                  "glue:GetUserDefinedFunction",
                  "glue:GetUserDefinedFunctions"
                ],
                "Resource":"*"
              }
            }
          }
        ],
        "RoleName":{
          "Fn::Join":[
            "-",
            [
              "LF-SAML-Role",
              {
                "Fn::FindInMap":[
                  "Suffix",
                  {
                    "Ref":"SAMLProviderName"
                  },
                  "Value"
                ]
              }
            ]
          ]
        }
      }
    },
    "LakeFormationEMRRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2008-10-17",
          "Statement":[
            {
              "Sid":"",
              "Effect":"Allow",
              "Principal":{
                "Service":"elasticmapreduce.amazonaws.com"
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "Policies":[
          {
            "PolicyName":"LF-EMR-Policy",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Resource":"*",
                  "Action":[
                    "ec2:AuthorizeSecurityGroupEgress",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:CancelSpotInstanceRequests",
                    "ec2:CreateNetworkInterface",
                    "ec2:CreateSecurityGroup",
                    "ec2:CreateTags",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DeleteSecurityGroup",
                    "ec2:DeleteTags",
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeAccountAttributes",
                    "ec2:DescribeDhcpOptions",
                    "ec2:DescribeImages",
                    "ec2:DescribeInstanceStatus",
                    "ec2:DescribeInstances",
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeNetworkAcls",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DescribePrefixLists",
                    "ec2:DescribeRouteTables",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeSpotInstanceRequests",
                    "ec2:DescribeSpotPriceHistory",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeTags",
                    "ec2:DescribeVpcAttribute",
                    "ec2:DescribeVpcEndpoints",
                    "ec2:DescribeVpcEndpointServices",
                    "ec2:DescribeVpcs",
                    "ec2:DetachNetworkInterface",
                    "ec2:ModifyImageAttribute",
                    "ec2:ModifyInstanceAttribute",
                    "ec2:RequestSpotInstances",
                    "ec2:RevokeSecurityGroupEgress",
                    "ec2:RunInstances",
                    "ec2:TerminateInstances",
                    "ec2:DeleteVolume",
                    "ec2:DescribeVolumeStatus",
                    "ec2:DescribeVolumes",
                    "ec2:DetachVolume",
                    "iam:GetRole",
                    "iam:GetRolePolicy",
                    "iam:ListInstanceProfiles",
                    "iam:ListRolePolicies",
                    "iam:PassRole",
                    "sdb:BatchPutAttributes",
                    "sdb:Select",
                    "sqs:CreateQueue",
                    "sqs:Delete*",
                    "sqs:GetQueue*",
                    "sqs:PurgeQueue",
                    "sqs:ReceiveMessage",
                    "cloudwatch:PutMetricAlarm",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:DeleteAlarms",
                    "application-autoscaling:RegisterScalableTarget",
                    "application-autoscaling:DeregisterScalableTarget",
                    "application-autoscaling:PutScalingPolicy",
                    "application-autoscaling:DeleteScalingPolicy",
                    "application-autoscaling:Describe*"
                  ]
                },
                {
                  "Effect":"Allow",
                  "Action":"iam:CreateServiceLinkedRole",
                  "Resource":"arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*",
                  "Condition":{
                    "StringLike":{
                      "iam:AWSServiceName":"spot.amazonaws.com"
                    }
                  }
                }
              ]
            }
          }
        ],
        "RoleName":{
          "Fn::Join":[
            "-",
            [
              "LF-EMR-Role",
              {
                "Fn::FindInMap":[
                  "Suffix",
                  {
                    "Ref":"SAMLProviderName"
                  },
                  "Value"
                ]
              }
            ]
          ]
        }
      }
    },
    "LakeFormationEMRInstanceProfileRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":"ec2.amazonaws.com"
              },
              "Action":"sts:AssumeRole"
            }
          ]
        },
        "Policies":[
          {
            "PolicyName":"LF-EMR-InstanceProfile-Policy",
            "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                {
                  "Effect":"Allow",
                  "Resource":"*",
                  "Action":[
                    "cloudwatch:*",
                    "dynamodb:*",
                    "ec2:Describe*",
                    "elasticmapreduce:Describe*",
                    "elasticmapreduce:ListBootstrapActions",
                    "elasticmapreduce:ListClusters",
                    "elasticmapreduce:ListInstanceGroups",
                    "elasticmapreduce:ListInstances",
                    "elasticmapreduce:ListSteps",
                    "kinesis:CreateStream",
                    "kinesis:DeleteStream",
                    "kinesis:DescribeStream",
                    "kinesis:GetRecords",
                    "kinesis:GetShardIterator",
                    "kinesis:MergeShards",
                    "kinesis:PutRecord",
                    "kinesis:SplitShard",
                    "rds:Describe*",
                    "s3:*",
                    "sdb:*",
                    "sns:*",
                    "sqs:*",
                    "glue:CreateDatabase",
                    "glue:UpdateDatabase",
                    "glue:DeleteDatabase",
                    "glue:GetDatabase",
                    "glue:GetDatabases",
                    "glue:CreateTable",
                    "glue:UpdateTable",
                    "glue:DeleteTable",
                    "glue:GetTable",
                    "glue:GetTables",
                    "glue:GetTableVersions",
                    "glue:CreatePartition",
                    "glue:BatchCreatePartition",
                    "glue:UpdatePartition",
                    "glue:DeletePartition",
                    "glue:BatchDeletePartition",
                    "glue:GetPartition",
                    "glue:GetPartitions",
                    "glue:BatchGetPartition",
                    "glue:CreateUserDefinedFunction",
                    "glue:UpdateUserDefinedFunction",
                    "glue:DeleteUserDefinedFunction",
                    "glue:GetUserDefinedFunction",
                    "glue:GetUserDefinedFunctions"
                  ]
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "ssm:DescribeAssociation",
                    "ssm:GetDeployablePatchSnapshotForInstance",
                    "ssm:GetDocument",
                    "ssm:DescribeDocument",
                    "ssm:GetManifest",
                    "ssm:GetParameters",
                    "ssm:ListAssociations",
                    "ssm:ListInstanceAssociations",
                    "ssm:PutInventory",
                    "ssm:PutComplianceItems",
                    "ssm:PutConfigurePackageResult",
                    "ssm:UpdateAssociationStatus",
                    "ssm:UpdateInstanceAssociationStatus",
                    "ssm:UpdateInstanceInformation"
                  ],
                  "Resource":"*"
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "ssmmessages:CreateControlChannel",
                    "ssmmessages:CreateDataChannel",
                    "ssmmessages:OpenControlChannel",
                    "ssmmessages:OpenDataChannel"
                  ],
                  "Resource":"*"
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "ec2messages:AcknowledgeMessage",
                    "ec2messages:DeleteMessage",
                    "ec2messages:FailMessage",
                    "ec2messages:GetEndpoint",
                    "ec2messages:GetMessages",
                    "ec2messages:SendReply"
                  ],
                  "Resource":"*"
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource":"*"
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "ec2:DescribeInstanceStatus"
                  ],
                  "Resource":"*"
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "ds:CreateComputer",
                    "ds:DescribeDirectories"
                  ],
                  "Resource":"*"
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents"
                  ],
                  "Resource":"*"
                },
                {
                  "Effect":"Allow",
                  "Action":"iam:PassRole",
                  "Resource":{
                    "Fn::Join":[
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Ref":"AWS::AccountId"
                        },
                        ":role/LF-SAML-Role-",
                        {
                          "Fn::FindInMap":[
                            "Suffix",
                            {
                              "Ref":"SAMLProviderName"
                            },
                            "Value"
                          ]
                        }
                      ]
                    ]
                  }
                },
                {
                  "Effect":"Allow",
                  "Action":"sts:AssumeRole",
                  "Resource":{
                    "Fn::Join":[
                      "",
                      [
                        "arn:aws:iam::",
                        {
                          "Ref":"AWS::AccountId"
                        },
                        ":role/LF-EMR-Role-",
                        {
                          "Fn::FindInMap":[
                            "Suffix",
                            {
                              "Ref":"SAMLProviderName"
                            },
                            "Value"
                          ]
                        }
                      ]
                    ]
                  }
                },
                {
                  "Effect":"Allow",
                  "Action":"lakeformation:GetTemporaryUserCredentialsWithSAML",
                  "Resource":"*"
                },
                {
                  "Effect":"Allow",
                  "Action":"iam:GetRole",
                  "Resource":"arn:aws:iam::*:role/*"
                }
              ]
            }
          }
        ],
        "RoleName":{
          "Fn::Join":[
            "-",
            [
              "LF-EMR-InstanceProfile-Role",
              {
                "Fn::FindInMap":[
                  "Suffix",
                  {
                    "Ref":"SAMLProviderName"
                  },
                  "Value"
                ]
              }
            ]
          ]
        }
      }
    },
    "LFEMRInstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "InstanceProfileName":{
          "Fn::Join":[
            "-",
            [
              "LakeFormationEMRInstanceProfileRole",
              {
                "Fn::FindInMap":[
                  "Suffix",
                  {
                    "Ref":"SAMLProviderName"
                  },
                  "Value"
                ]
              }
            ]
          ]
        },
        "Path":"/",
        "Roles":[
          {
            "Ref":"LakeFormationEMRInstanceProfileRole"
          }
        ]
      }
    },
    "LFEMRSecurityConfiguration":{
      "Type":"AWS::EMR::SecurityConfiguration",
      "DependsOn":[
        "LakeFormationSAMLRole"
      ],
      "Properties":{
        "Name":{
          "Fn::Join":[
            "-",
            [
              "LF-EMR-SecurityConfiguration",
              {
                "Fn::FindInMap":[
                  "Suffix",
                  {
                    "Ref":"SAMLProviderName"
                  },
                  "Value"
                ]
              }
            ]
          ]
        },
        "SecurityConfiguration":{
          "LakeFormationConfiguration":{
            "IdpMetadataS3Path":{
              "Ref":"IdentityProviderMetadataPath"
            },
            "EmrRoleForUsersARN":{
              "Fn::GetAtt":[
                "LakeFormationEMRRole",
                "Arn"
              ]
            },
            "LakeFormationRoleForSAMLPrincipalARN":{
              "Fn::GetAtt":[
                "LakeFormationSAMLRole",
                "Arn"
              ]
            }
          },
          "AuthenticationConfiguration":{
            "KerberosConfiguration":{
              "Provider":"ClusterDedicatedKdc",
              "ClusterDedicatedKdcConfiguration":{
                "TicketLifetimeInHours":24
              }
            }
          }
        }
      }
    },
    "EMRCluster":{
      "Type":"AWS::EMR::Cluster",
      "DependsOn":[
        "LFEMRSecurityConfiguration",
        "LakeFormationEMRInstanceProfileRole",
        "LFEMRInstanceProfile"
      ],
      "Properties":{
        "Instances":{
          "MasterInstanceGroup":{
            "InstanceCount":1,
            "InstanceType":{
              "Ref":"InstanceType"
            },
            "Market":"ON_DEMAND",
            "Name":"cfnMaster"
          },
          "CoreInstanceGroup":{
            "InstanceCount":1,
            "InstanceType":{
              "Ref":"InstanceType"
            },
            "Market":"ON_DEMAND",
            "Name":"cfnCore"
          },
          "Ec2SubnetId":{
            "Ref":"VPCPublicSubnet"
          },
          "Ec2KeyName":{
            "Ref":"EC2KeyPair"
          }
        },
        "Name":{
          "Fn::Join":[
            "-",
            [
              "LF-EMRCluster",
              {
                "Fn::FindInMap":[
                  "Suffix",
                  {
                    "Ref":"SAMLProviderName"
                  },
                  "Value"
                ]
              }
            ]
          ]
        },
        "Applications":[
          {
            "Name":"Hadoop"
          },
          {
            "Name":"Spark"
          },
          {
            "Name":"Livy"
          },
          {
            "Name":"Zeppelin"
          }
        ],
        "Configurations":[
          {
            "Classification":"spark-hive-site",
            "ConfigurationProperties":{
              "hive.metastore.glue.catalogid":{
                "Ref":"AWS::AccountId"
              }
            }
          }
        ],
        "JobFlowRole":{
          "Ref":"LFEMRInstanceProfile"
        },
        "KerberosAttributes":{
          "KdcAdminPassword":"Password1!",
          "Realm":"EC2.INTERNAL"
        },
        "ServiceRole":{
          "Ref":"LakeFormationEMRRole"
        },
        "ReleaseLabel":{
          "Ref":"ReleaseLabel"
        },
        "SecurityConfiguration":{
          "Ref":"LFEMRSecurityConfiguration"
        },
        "VisibleToAllUsers":true,
        "LogUri":{
          "Fn::Join":[
            "",
            [
              "s3://lf-workshop-",
              {
                "Ref":"AWS::AccountId"
              },
              "/emrlogs"
            ]
          ]
        }
      }
    },
    "EMRCopyNotebooksStep":{
      "Type":"AWS::EMR::Step",
      "Properties":{
        "ActionOnFailure":"CONTINUE",
        "HadoopJarStep":{
          "Args":[
            "s3://aws-data-analytics-workshops/lake-formation-workshop/scripts/copyNotebooks.sh",
            {
              "Fn::Join":[
                "",
                [
                  "lf-workshop-",
                  {
                    "Ref":"AWS::AccountId"
                  }
                ]
              ]
            }
          ],
          "Jar":"s3://elasticmapreduce/libs/script-runner/script-runner.jar",
          "MainClass":""
        },
        "Name":"CopyNoteBooks",
        "JobFlowId":{
          "Ref":"EMRCluster"
        }
      }
    },
    "EMRCopyKnoxCertificateStep":{
      "Type":"AWS::EMR::Step",
      "Properties":{
        "ActionOnFailure":"CONTINUE",
        "HadoopJarStep":{
          "Args":[
            "s3://aws-data-analytics-workshops/lake-formation-workshop/scripts/copyknoxpubliccertificate.sh",
            {
              "Fn::Join":[
                "",
                [
                  "lf-workshop-",
                  {
                    "Ref":"AWS::AccountId"
                  }
                ]
              ]
            }
          ],
          "Jar":"s3://elasticmapreduce/libs/script-runner/script-runner.jar",
          "MainClass":""
        },
        "Name":"CopyKnoxPublicCertificate",
        "JobFlowId":{
          "Ref":"EMRCluster"
        }
      }
    }
  },
  "Outputs":{
    "ConsoleIAMLoginUrl":{
      "Description":"Console IAM Login URL to try out different users",
      "Value":{
        "Fn::Join":[
          "",
          [
            "https://",
            {
              "Ref":"AWS::AccountId"
            },
            ".signin.aws.amazon.com/console"
          ]
        ]
      }
    },
    "EMRMasterNodeDNS":{
      "Description":"EMR Cluster Master Node DNS",
      "Value":{
        "Fn::GetAtt":[
          "EMRCluster",
          "MasterPublicDNS"
        ]
      }
    },
    "NotebooksS3Path":{
      "Description":"Amazon S3 path that contains Zeppelin & EMR Notebooks",
      "Value":{
        "Fn::Join":[
          "",
          [
            "s3://lf-workshop-",
            {
              "Ref":"AWS::AccountId"
            },
            "/notebooks"
          ]
        ]
      }
    }
  }
}